name: "version-compatible-test"

on:
  schedule:
    - cron:  '2 0 * * *'
  workflow_dispatch:

jobs:
  version-compatible-test:
    runs-on: [self-hosted, daily-build, bench-01]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set Variable
        id: vars
        run: |
          echo ::set-output name=META_URL::redis://mymaster,172.27.0.1,172.27.0.2,172.27.0.3:26379/7
          echo ::set-output name=STORAGE_URL::http://172.27.0.2:9005/juicefs-version-compatible
          echo ::set-output name=MOUNT_POINT::/tmp/juicefs-version-compatible

      - name: Build linux target
        run: |
          export GOPATH=/usr/local/go
          export HOME=/root
          make juicefs
          mv juicefs jfs_new
          echo juicefs new version: $(./jfs_new -V)

      - uses: actions/checkout@v2
      - name: Test with engine
        uses: ./.github/actions/test-engine-action
        with: 
          meta-url: "${{steps.vars.outputs.META_URL}}"
          storage-url : "${{steps.vars.outputs.STORAGE_URL}}"
          mount-point : "${{steps.vars.outputs.MOUNT_POINT}}"

      - name: Version Compatible Test
        run: |
          tests=(
            "format:jfs_old, format:jfs_new, destroy:old", 
            "format:jfs_old, mount:jfs_old, write_file1_1M:jfs_old, umount:jfs_old, format:jfs_new, mount:jfs_new, read_file1:jfs_read, verify_md5, destroy:old"
          )    
          urls=($(curl -s https://api.github.com/repos/juicedata/juicefs/releases | grep browser_download_url | grep linux-amd64.tar.gz | awk -F\" '{print $4}'))
          for url in "${urls[@]}"; do 
            echo download url is: $url
            wget $url
            tar -zxf $(basename $url)
            mv juicefs juicefs_old
            echo juicefs old version: $(./juicefs_old -V)
            test_arr=$(IFS=',' read -a arr <<< "$tests")
            for test in "${test_arr[@]}"; do 
              command=$(echo $test | awk -F: '{print $1}'| xargs | awk -F_ '{print $1}')
              if [ command=='read' || command=='write' ]
                
              fi
              jfs_bin=$(echo $test | awk -F: '{print $2}'| xargs)
              case "$command" in
                "format") echo "cmd is format" 
                ;;
                "mount") 
                  echo "cmd is mount" 
                  ;;
                "destroy") 
                  echo "cmd is mount" 
                  ;;
                "write") 
                  echo "cmd is write" 
                  file=$(echo $test | awk -F: '{print $1}'| xargs | awk -F_ '{print $2}')
                  size=$(echo $test | awk -F: '{print $1}'| xargs | awk -F_ '{print $3}')
                  ;;
                "read") 
                  echo "cmd is read" 
                  file=$(echo $test | awk -F: '{print $1}'| xargs | awk -F_ '{print $2}')
                  size=$(echo $test | awk -F: '{print $1}'| xargs | awk -F_ '{print $3}')
                  ;;
              esac
            done

            sudo ./juicefs_old format --storage minio --bucket  ${{ steps.vars.outputs.MINIO_URL }} --access-key minioadmin --secret-key ${{ secrets.MINIO_SECRET_KEY }}  ${{ steps.vars.outputs.META_URL }} juicefs-version-compatible
            sudo ./juicefs_new format --storage minio --bucket  ${{ steps.vars.outputs.MINIO_URL }} --access-key minioadmin --secret-key ${{ secrets.MINIO_SECRET_KEY }}  ${{ steps.vars.outputs.META_URL }} juicefs-version-compatible
            UUID=$(./juicefs_new status ${{ steps.vars.outputs.META_URL }} | grep UUID | cut -d '"' -f 4)
            if [ -n "$UUID" ];then
              sudo ./juicefs_old destroy --force ${{ steps.vars.outputs.META_URL }} $UUID
            fi
          done

#      - name: Send Slack Notification
#        if: ${{ failure() }}
#        uses: juicedata/slack-notify-action@main
#        with:
#          channel-id: "${{ secrets.SLACK_CHANNEL_ID_FOR_PR_CHECK_NOTIFY }}"
#          slack_bot_token: "${{ secrets.SLACK_BOT_TOKEN }}"  